plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'ge.vako.otel'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'


//	for metrics
	implementation 'io.micrometer:micrometer-registry-otlp'


//	for traces
//	implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.1.6' - bridges the Micrometer Observation API to OpenTelemetry.
//	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.25.0' - reports traces to a collector that can accept OTLP.

//
//
//	implementation('org.springframework.cloud:spring-cloud-starter-sleuth') {
//		//  We want to exclude the default tracer coming from Sleuth...
//		exclude group: 'org.springframework.cloud', module: 'spring-cloud-sleuth-brave'
//	}
//	implementation 'org.springframework.cloud:spring-cloud-sleuth-otel-autoconfigure:1.1.0'
//	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.25.0'

/*
	implementation('org.springframework.cloud:spring-cloud-starter-sleuth') {
		exclude group: 'org.springframework.cloud', module: 'spring-cloud-sleuth-brave'
		//  We want to exclude the default tracer coming from Sleuth...
	}
	implementation 'org.springframework.cloud:spring-cloud-sleuth-otel-autoconfigure'
	// ... and we want to include the one coming from Spring Cloud Sleuth OTel
*/




	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
