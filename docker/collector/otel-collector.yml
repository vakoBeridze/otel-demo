receivers:
  otlp:
    protocols:
      grpc:

processors:
  # batch metrics before sending to reduce API usage
  batch:

  #  attributes:
  #    actions:
  #      - from_context: application
  #        action: upsert
  #        key: zapp
  #      - from_attribute: application
  #        action: upsert
  #        key: zapp
  #      - from_attribute: job
  #        action: upsert
  #        key: wkapp

  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(metric.description, "")
#      - context: metric
#        statements:
#          - set(description, "Zzz") where name == "http.server.requests.max"
#      - context: metric
#        statements:
#          - set(description, "Yyy") where name == "http.server.requests"
#      - context: datapoint
#        statements:
#          - set(attributes["namespace"], resource.attributes["k8s.namespace.name"])
#          - set(attributes["container"], resource.attributes["k8s.container.name"])
#          - set(attributes["pod"], resource.attributes["k8s.pod.name"])

exporters:
  logging:
    loglevel: info

  otlp:
    endpoint: tempo:4317
    tls:
      insecure: true

  prometheus:
    endpoint: ":8889"
    const_labels:
      source: otel-collector

# https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/README.md
extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collectorâ€™s performance data
  pprof:
    endpoint: :1888
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:
    endpoint: 0.0.0.0:55679


service:
  extensions: [ health_check, pprof, zpages ]
  telemetry:
    logs:
      level: "info"
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ otlp ]
    metrics:
      receivers: [ otlp ]
      processors: [ transform,batch ]
      exporters: [ logging,prometheus ]
